const PdfPrinter = require('pdfmake');
const { pool } = require('../config/db');
// Use a dummy font name and point all to empty strings.
const path = require('path');
const fonts = {
  Roboto: {
    normal: path.join(__dirname, '../fonts/Roboto-Regular.ttf'),
    bold: path.join(__dirname, '../fonts/Roboto-Medium.ttf'),
    italics: path.join(__dirname, '../fonts/Roboto-Italic.ttf'),
    bolditalics: path.join(__dirname, '../fonts/Roboto-MediumItalic.ttf')
  }
};

const printer = new PdfPrinter(fonts);

// Controller function
exports.downloadReceiptsPdf = async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) return res.status(401).json({ error: "Unauthorized" });

    // Example DB query, use your real pool/query here!
    const [rows] = await pool.query(
      `SELECT payment_id, trx_id, amount_bdt, credits, status, created_at 
       FROM credit_payments WHERE user_id = ? ORDER BY created_at DESC`,
      [userId]
    );
const now = new Date();
const pad = n => n.toString().padStart(2, '0');
const generatedDate =
  now.getFullYear() + '-' +
  pad(now.getMonth() + 1) + '-' +
  pad(now.getDate()) + ' ' +
  pad(now.getHours()) + ':' +
  pad(now.getMinutes()) + ':' +
  pad(now.getSeconds());


const docDefinition = {
  defaultStyle: { font: 'Roboto', fontSize: 9 },
  pageMargins: [30, 40, 30, 35], // more top for header, more bottom for footer
 header: function(currentPage, pageCount) {
  return {
    columns: [
      { text: 'Tivoa Art', style: 'headerLeft' },
      { text: `Generated: ${generatedDate}`, alignment: 'right', style: 'headerRight' }
    ],
    margin: [30, 20, 30, 0]
  };
},
  footer: function(currentPage, pageCount) {
    return {
      columns: [
        { text: `Generated by Tivoa Art`, alignment: 'left', style: 'footerLeft' },
        { text: `Page ${currentPage} of ${pageCount}`, alignment: 'right', style: 'footerRight' }
      ],
      margin: [30, 0, 30, 10]
    };
  },
  styles: {
    headerLeft: { fontSize: 10, bold: true, color: '#444' },
    headerRight: { fontSize: 9, italics: true, color: '#888' },
    footerLeft: { fontSize: 8, color: '#888' },
    footerRight: { fontSize: 8, italics: true, color: '#888' },
  },
  content: [
    {
      text: 'Your Transactions',
      fontSize: 15,
      alignment: 'center',
      bold: true,
      margin: [0, 0, 0, 12]
    },
    {
      layout: {
        paddingLeft: () => 2,
        paddingRight: () => 2,
        paddingTop: () => 1,
        paddingBottom: () => 1,
        fillColor: (rowIndex) => (rowIndex === 0 ? '#f2f2f2' : (rowIndex % 2 === 0 ? '#fafbfc' : null)),
        hLineWidth: () => 0.8,
        vLineWidth: () => 0.6,
        hLineColor: () => '#aaa',
        vLineColor: () => '#ddd'
      },
      table: {
        headerRows: 1,
        widths: ['18%', '18%', '18%', '18%', '28%'],
        body: [
          [
            { text: 'Date', bold: true, alignment: 'center' },
            { text: 'Amount', bold: true, alignment: 'center' },
            { text: 'Credits', bold: true, alignment: 'center' },
            { text: 'Status', bold: true, alignment: 'center' },
            { text: 'Trx ID', bold: true, alignment: 'center' }
          ],
          ...rows.map(tx => [
            { text: tx.created_at?.toISOString().slice(0, 10) || "", alignment: 'center' },
            { text: tx.amount_bdt || "-", alignment: 'right' },
            { text: tx.credits || "-", alignment: 'right' },
            { text: tx.status || "-", alignment: 'center' },
            { text: tx.trx_id || "-", alignment: 'center' }
          ])
        ]
      }
    }
  ]
};



    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", 'attachment; filename="receipts.pdf"');

    const pdfDoc = printer.createPdfKitDocument(docDefinition);
    pdfDoc.pipe(res);
    pdfDoc.end();

  } catch (err) {
    console.error(err);
    if (!res.headersSent) {
      res.status(500).json({ error: "Internal Server Error" });
    }
  }
};
